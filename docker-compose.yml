version: '3.8'

services:
  postgres-backup:
    build: .
    container_name: postgres-s3-backup
    restart: unless-stopped
    
    environment:
      # Required: S3 Configuration
      S3_BUCKET: ${S3_BUCKET:-my-backup-bucket}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      
      # Optional: S3 Endpoint (for custom S3-compatible services)
      # S3_URL: ${S3_URL:-https://s3.amazonaws.com}
      
      # Optional: S3 Path prefix for organizing backups
      S3_PATH: ${S3_PATH:-postgres-backups}
      
      # Required: PostgreSQL Connection
      POSTGRES_CONNECTION_STRING: ${POSTGRES_CONNECTION_STRING}
      
      # Required: Backup Schedule (cron format)
      # Examples:
      # - "0 2 * * *"     # Daily at 2:00 AM
      # - "0 */6 * * *"   # Every 6 hours
      # - "0 2 * * 0"     # Weekly on Sunday at 2:00 AM
      BACKUP_INTERVAL: ${BACKUP_INTERVAL:-0 2 * * *}
      
      # Optional: Backup Retention (days)
      # If not set, all backups will be kept
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      
      # Optional: Logging Level
      LOG_LEVEL: ${LOG_LEVEL:-info}
    
    # Resource limits (optional - adjust based on your database size)
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Health check to monitor container status
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # Timezone configuration (optional)
    # environment:
    #   TZ: ${TZ:-UTC}
    
    # Volume mounts for temporary files (optional)
    # volumes:
    #   - ./tmp:/tmp
    
    # Network configuration (if needed)
    # networks:
    #   - backup-network

# Optional: Custom network for isolation
# networks:
#   backup-network:
#     driver: bridge

# Optional: Named volumes for persistent data
# volumes:
#   backup-temp:
#     driver: local