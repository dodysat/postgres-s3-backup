name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '22'
  DOCKER_IMAGE_NAME: postgres-s3-backup

jobs:
  # Code Quality and Testing
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run linting
      run: npm run lint
      
    - name: Check code formatting
      run: npm run format:check
      
    - name: Run unit tests
      run: npm run test:ci
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --only=production
      
    - name: Build TypeScript
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7

  # Docker Build and Test
  docker:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ env.DOCKER_IMAGE_NAME }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        # Test that the image can be created and basic commands work
        docker run --rm ${{ env.DOCKER_IMAGE_NAME }}:test node --version
        docker run --rm ${{ env.DOCKER_IMAGE_NAME }}:test which pg_dump

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      minio:
        image: minio/minio:latest
        env:
          MINIO_ACCESS_KEY: testkey
          MINIO_SECRET_KEY: testsecret
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        ports:
          - 9000:9000
        command: server /data
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Wait for services
      run: |
        # Wait for PostgreSQL
        until pg_isready -h localhost -p 5432 -U testuser; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        # Wait for MinIO
        until curl -f http://localhost:9000/minio/health/live; do
          echo "Waiting for MinIO..."
          sleep 2
        done
        
    - name: Setup test data
      run: |
        # Create test bucket in MinIO
        docker run --rm --network host minio/mc:latest \
          mc config host add minio http://localhost:9000 testkey testsecret
        docker run --rm --network host minio/mc:latest \
          mc mb minio/test-bucket
          
        # Create test data in PostgreSQL
        PGPASSWORD=testpass psql -h localhost -U testuser -d testdb -c \
          "CREATE TABLE test_table (id SERIAL PRIMARY KEY, data TEXT);"
        PGPASSWORD=testpass psql -h localhost -U testuser -d testdb -c \
          "INSERT INTO test_table (data) VALUES ('test data 1'), ('test data 2');"
      
    - name: Run integration tests
      run: npm run test:integration
      env:
        POSTGRES_CONNECTION_STRING: postgresql://testuser:testpass@localhost:5432/testdb
        S3_URL: http://localhost:9000
        S3_BUCKET: test-bucket
        S3_ACCESS_KEY: testkey
        S3_SECRET_KEY: testsecret
        S3_PATH: test-backups
        BACKUP_INTERVAL: "*/5 * * * * *"  # Every 5 seconds for testing
        LOG_LEVEL: debug

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: Build Docker image for scanning
      run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}:scan .
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE_NAME }}:scan
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Release and Deploy
  release:
    name: Release and Deploy
    runs-on: ubuntu-latest
    needs: [test, build, docker, integration, security]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Create GitHub release assets
      run: |
        # Create release archive
        tar -czf postgres-s3-backup-${{ github.ref_name }}.tar.gz \
          dist/ \
          docker-compose.yml \
          .env.example \
          README.md \
          scripts/
          
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./postgres-s3-backup-${{ github.ref_name }}.tar.gz
        asset_name: postgres-s3-backup-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, build, docker, integration, security]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' && needs.docker.result == 'success' && needs.integration.result == 'success' && needs.security.result == 'success' }}
      run: echo "✅ All CI/CD checks passed successfully!"
      
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' || needs.docker.result == 'failure' || needs.integration.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "❌ CI/CD pipeline failed!"
        echo "Test: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Docker: ${{ needs.docker.result }}"
        echo "Integration: ${{ needs.integration.result }}"
        echo "Security: ${{ needs.security.result }}"